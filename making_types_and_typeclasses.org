#+TITLE: Making types and typeclasses

* Algebraic data types intro
You can use the ~data~ keyword to define your own types

Here is the def for bool
#+begin_src haskell
data Bool = False | True
#+end_src

The parts after the = are the value constructors which specify the different values the type can have. The ~|~ can be read as an "or"

We can define a shape like so
#+begin_src haskell
data Shape = Circle Float Float Float | Rectangle Float Float Float Float
#+end_src

#+RESULTS:

Value constructors are actually functions! Here is what the above would be as a type printed out with ~:t~
#+begin_src haskell
Circle :: Float -> Float -> Float -> Shape
Rectangle :: Float -> Float -> Float -> Float -> Shape
#+end_src

Lets get the surface area of these
#+begin_src haskell
:{
surface :: Shape -> Float
surface (Circle _ _ r) = pi * r ^ 2
surface (Rectangle x1 y1 x2 y2) = (abs $ x2 - x1) * (abs $ y2 - y1)
:}
surface $ Circle 10 20 10
#+end_src

#+RESULTS:
: 314.15927

Note that we must use ~Shape~ as the type and not ~Circle~ (because that is a value not a type)

Also, we can pattern match against the constructors!

We can't print out the data directly yet though... We need to derive the Show typeclass
#+begin_src haskell
data Shape = Circle Float Float Float | Rectangle Float Float Float Float deriving (Show)
Circle 10 20 5
#+end_src

#+RESULTS:
: Circle 10.0 20.0 5.0

Value constructors are functions so we can use currying and map and all the fancy
#+begin_src haskell
map (Circle 10 20) [4,5,6,6]
#+end_src

#+RESULTS:
| Circle | 10.0 | 20.0 | 4.0 | Circle | 10.0 | 20.0 | 5.0 | Circle | 10.0 | 20.0 | 6.0 | Circle | 10.0 | 20.0 | 6.0 |

Now lets simplify our code by abstracting points
#+begin_src haskell
:{
data Point = Point Float Float deriving (Show)
data Shape = Circle Point Float | Rectangle Point Point deriving (Show)
surface :: Shape -> Float
surface (Circle _ r) = pi * r ^ 2
surface (Rectangle (Point x1 y1) (Point x2 y2)) = (abs $ x2 - x1) * (abs $ y2 - y1)
:}
surface (Rectangle (Point 0 0) (Point 100 100))
#+end_src

#+RESULTS:
: 10000.0

We can nudge our shapes by moving them x and y
#+begin_src haskell
:{
nudge :: Shape -> Float -> Float -> Shape
nudge (Circle (Point x y) r) a b = Circle (Point (x+a) (y+b)) r
nudge (Rectangle (Point x1 y1) (Point x2 y2)) a b = Rectangle (Point (x1+a) (y1+b)) (Point (x2+a) (y2+b))
:}
nudge (Circle (Point 34 34) 10) 5 10
#+end_src

#+RESULTS:
: Circle (Point 39.0 44.0) 10.0

You can export all type constructors by exporting them with ~(..)~ on the end
#+begin_src haskell
module Shapes
( Point(..)
, Shape(..)
, surface
, nudge
) where 
#+end_src

That basically exports Circle and Rectangle. The same as ~Shape(Circle, Rectangle)~. If you want, you can define functions that build your data type and then if you only export the data type without any constructors like ~Shape~ then you can force users of the module to only build those objects through your custom functions rather than the value constructors

* Record syntax
if we want to represent a person, we could do it like this
#+begin_src haskell
data Person = Person String String Int Float String String deriving (Show)
#+end_src

But then accessing the data becomes super tedious
#+begin_src haskell
firstName :: Person -> String
firstName (Person firstname _ _ _ _ _) = firstname

lastName :: Person -> String
lastName (Person _ lastname _ _ _ _) = lastname

age :: Person -> Int
age (Person _ _ age _ _ _) = age

height :: Person -> Float
height (Person _ _ _ height _ _) = height

phoneNumber :: Person -> String
phoneNumber (Person _ _ _ _ number _) = number

flavor :: Person -> String
flavor (Person _ _ _ _ _ flavor) = flavor
#+end_src

This is where record syntax comes in
#+begin_src haskell
:{
data Person = Person { firstName :: String
                     , lastName :: String
                     , age :: Int
                     , height :: Float
                     , phoneNumber :: String
                     , flavor :: String
                     } deriving (Show)
:}
#+end_src

#+RESULTS:

By doing this, haskell automatically made these functions for us: firstName, lastName, age, height, phoneNumber and flavor

Record syntax also gives us nice printing
#+begin_src haskell
data Car = Car String String Int deriving (Show)
Car "Ford" "Mustang" 1967
#+end_src

#+RESULTS:
: Car "Ford" "Mustang" 1967

As opposed to the following:
#+begin_src haskell
data Car = Car {company :: String, model :: String, year :: Int} deriving (Show)
Car {company="Ford", model="Mustang", year=1967}
#+end_src

#+RESULTS:
: Car {company = "Ford", model = "Mustang", year = 1967}

* Type parameters
You can have value constructors take values and make a value. You can also have type parameters take types and make a type. This is similar to c++ templates.

#+begin_src haskell
data Maybe a = Nothing | Just a
#+end_src

Here, a is the type parameter and that makes Maybe a type constructor. Maybe itself is not a type but if we pass Maybe 'a' then the type is ~Maybe Char~

Lists are actually type constructors because they have types like ~[Int]~

The type of ~Nothing~ is ~Maybe a~ which is polymorphic

You could see this being useful for implementing a Map type. But you have to be careful... it would seem like you would want this:
#+begin_src haskell
data (Ord k) => Map k v = ...
#+end_src

But haskell strongly recommends against putting type constraints in data definitions so that functions that require the data definition can individually do that
An example would be toList not needing to compare keys because it just maps to a list

Let's implement a 3D vector type that can support many numeric types
#+begin_src haskell
:{
data Vector a = Vector a a a deriving (Show)

vplus :: (Num t) => Vector t -> Vector t -> Vector t
(Vector i j k) `vplus` (Vector l m n) = Vector (i+l) (j+m) (k+n)

vectMult :: (Num t) => Vector t -> t -> Vector t
(Vector i j k) `vectMult` m = Vector (i*m) (j*m) (k*m)

scalarMult :: (Num t) => Vector t -> Vector t -> t
(Vector i j k) `scalarMult` (Vector l m n) = i*l + j*m + k*n
:}
Vector 3 5 8 `vplus` Vector 9 2 8
Vector 2 9 3 `vectMult` (Vector 4 9 5 `scalarMult` Vector 9 2 4)
#+end_src

#+RESULTS:
: Vector 148 666 222

Notice that the type of the vector is ~Vector t~ whereas when we use it as a value we use all 3 numbers

* Derived instances
We have already seen typeclasses like ~Ord~. We will get around to implementing the functions needed to conform to a typeclass, but for now we can have haskell do the implementation for us

We can use deriving for that!

#+begin_src haskell
:{
data Person = Person { firstName :: String
                     , lastName :: String
                     , age :: Int
                     } deriving (Eq)
:}
let mikeD = Person {firstName = "Michael", lastName = "Diamond", age = 43}
mikeD == Person {firstName = "Michael", lastName = "Diamond", age = 43}
#+end_src

#+RESULTS:
: ghci> True

~Show~ and ~Read~ are typeclasses for converting to and from string s
#+begin_src haskell
:{
data Person = Person { firstName :: String
                     , lastName :: String
                     , age :: Int
                     } deriving (Eq, Show, Read)
:}
let mikeD = Person {firstName = "Michael", lastName = "Diamond", age = 43}
mikeD
#+end_src

#+RESULTS:
: ghci> Person {firstName = "Michael", lastName = "Diamond", age = 43}

#+begin_src haskell
read "Person {firstName =\"Michael\", lastName =\"Diamond\", age = 43}" :: Person
#+end_src

#+RESULTS:
: Person {firstName = "Michael", lastName = "Diamond", age = 43}

You can also read parameterized types but you must specify the type with the ~::~ afterwards

We can derive the ~Ord~ type. Values of the type defined first are ordered the lowest

#+begin_src haskell
data Bool = False | True deriving (Ord)
#+end_src

The ~Maybe~ type is defined in this way so that ~Nothing~ is less than ~Maybe a~. If you compare two Maybes then it compares the inner value

We can use the ~Enum~ typeclass to make a type that takes no parameters (nullary) into a type that has predecessors and successors

We can also use the ~Bounded~ typeclass to make a type have a lowest and highest value

#+begin_src haskell
:{
data Day = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday
           deriving (Eq, Ord, Show, Read, Bounded, Enum)
:}
Wednesday
minBound :: Day -- because of Bounded
succ Monday -- because of Enum
[minBound..maxBound] :: [Day] -- combining them!
#+end_src

#+RESULTS:
| Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday |

* Type synonyms
We saw before that ~String~ and ~[Char]~ are the same type. This is done through type synonyms like so

#+begin_src haskell
type String = [Char]
#+end_src

Before we had a phone book like the following:
#+begin_src haskell
phoneBook :: [(String,String)]
phoneBook =
    [("betty","555-2938")
    ,("bonnie","452-2928")
    ,("patsy","493-2928")
    ,("lucille","205-2928")
    ,("wendy","939-8282")
    ,("penny","853-2492")
    ]
#+end_src

That is not very easy to read the type. We can improve this with synonyms!

#+begin_src haskell
type PhoneNumber = String
type Name = String
type PhoneBook = [(Name,PhoneNumber)]
#+end_src

Redeclaring the ~String~ type is very common in haskell to convey extra information to programmers. We can use our new type to make a nicer function

#+begin_src haskell
inPhoneBook :: Name -> PhoneNumber -> PhoneBook -> Bool
inPhoneBook name pnumber pbook = (name,pnumber) `elem` pbook
#+end_src

Type synonyms can be parameterized as well! We can make a type synonym and implement a function for it like so

#+begin_src haskell
type AssocList k v = [(k,v)]
myFunc (Eq k) => k -> AssocList k v -> Maybe v
#+end_src

You can also partially apply type parameters to get new type constructors from them

#+begin_src haskell
type IntMap v = Map Int v
type IntMap = Map Int
#+end_src

Note that types can only be used like this when we are in haskell's "type world." This is if we are in a ~data~ or ~type~ expression or if we are after a ~::~ which could be after a type declaration (like function definition) or type annotations (like annotating a list of numbers as a list of ints)

We can now learn about the ~Either~ type

#+begin_src haskell
data Either a b = Left a | Right b deriving (Eq, Ord, Read, Show)
#+end_src

This lets us encapsulate two types into one. It is useful in the same way as ~Maybe~ but we can actually return something rather than nothing for an error

~Left~ would be for erroring results and ~Right~ would be for actual success values

We can see this through a locker example:

#+begin_src haskell
import qualified Data.Map as Map

:{
data LockerState = Taken | Free deriving (Show, Eq)
type Code = String
type LockerMap = Map.Map Int (LockerState, Code)

lockerLookup :: Int -> LockerMap -> Either String Code
lockerLookup lockerNumber map =
    case Map.lookup lockerNumber map of
        Nothing -> Left $ "Locker number " ++ show lockerNumber ++ " doesn't exist!"
        Just (state, code) -> if state /= Taken
                                then Right code
                                else Left $ "Locker " ++ show lockerNumber ++ " is already taken!"

lockers :: LockerMap
lockers = Map.fromList
    [(100,(Taken,"ZD39I"))
    ,(101,(Free,"JAH3I"))
    ,(103,(Free,"IQSA9"))
    ,(105,(Free,"QOTSA"))
    ,(109,(Taken,"893JJ"))
    ,(110,(Taken,"99292"))
    ]
:}
#+end_src

#+begin_src haskell
lockerLookup 101 lockers
#+end_src

#+RESULTS:
: Right "JAH3I"

We could have used a ~Maybe~ but then we would not have the debug data in the ~Left~ results

* Recursive data structures
We can reference any type within a data structure, even the original type. This leads to recursive types which helps with things like linked lists

We can use algebraic data types to make our own list with recursive data structures
#+begin_src haskell
data List a = Empty | Cons a (List a) deriving (Show, Read, Eq, Ord)
#+end_src

#+RESULTS:

This can be better understood in record syntax:
#+begin_src haskell
data List a = Empty | Cons { listHead :: a, listTail :: List a} deriving (Show, Read, Eq, Ord)
#+end_src

~Cons~ is another word for ~:~ so this works just like the built-in lists

We can use it now!
#+begin_src haskell
3 `Cons` (4 `Cons` (5 `Cons` Empty))
#+end_src

#+RESULTS:
: Cons 3 (Cons 4 (Cons 5 Empty))

We can define functions to be automatically infix by making them comprised of only special characters. This also applies to constructors

#+begin_src haskell
:{
infixr 5 :-:
data List a = Empty | a :-: (List a) deriving (Show, Read, Eq, Ord)
:}
3 :-: 4 :-: 5 :-: Empty
#+end_src

#+RESULTS:
: 3 :-: (4 :-: (5 :-: Empty))

Note the new syntax. That is a fixity declaration. A fixity states how an operator binds to left or right and also presidence like doing ~*~ before ~+~ (which would mean ~*~ is a higher number)

We can make the ~++~ function for our lists now
#+begin_src haskell
:{
infixr 5  .++
(.++) :: List a -> List a -> List a
Empty .++ ys = ys
(x :-: xs) .++ ys = x :-: (xs .++ ys)
a = 3 :-: 4 :-: 5 :-: Empty
b = 6 :-: 7 :-: Empty
:}
a .++ b
#+end_src

#+RESULTS:
: 3 :-: (4 :-: (5 :-: (6 :-: (7 :-: Empty))))

We could do the pattern matching on ~(x :-: xs)~ because pattern matching is actually about matching constructors (and only constructors)

We can now implement binary search trees! Seems like an algebraic data type is in order:
#+begin_src haskell
data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)
#+end_src

#+RESULTS:

For insertion, we have no mutability so we have to do something like ~a -> Tree a -> Tree a~ which works because haskell is lazy and garbage collected

Lets make insert and a singleton function to generate a tree with one node:
#+begin_src haskell
:{
singleton :: a -> Tree a
singleton x = Node x EmptyTree EmptyTree

treeInsert :: (Ord a) => a -> Tree a -> Tree a
treeInsert x EmptyTree = singleton x
treeInsert x (Node a left right)
    | x == a = Node x left right
    | x < a  = Node a (treeInsert x left) right
    | x > a  = Node a left (treeInsert x right)
:}
#+end_src

#+RESULTS:

We can also make a pretty clean lookup function
#+begin_src haskell
:{
treeElem :: (Ord a) => a -> Tree a -> Bool
treeElem x EmptyTree = False
treeElem x (Node a left right)
    | x == a = True
    | x < a  = treeElem x left
    | x > a  = treeElem x right
:}
#+end_src

#+RESULTS:

Folding lists into the custom tree:
#+begin_src haskell
:{
nums = [8,6,4,1,7,3,5]
numsTree = foldr treeInsert EmptyTree nums
:}
numsTree
#+end_src

#+RESULTS:
: Node 5 (Node 3 (Node 1 EmptyTree EmptyTree) (Node 4 EmptyTree EmptyTree)) (Node 7 (Node 6 EmptyTree EmptyTree) (Node 8 EmptyTree EmptyTree))

And we can test our lookup function too
#+begin_src haskell
8 `treeElem` numsTree
#+end_src

#+RESULTS:
: True

* Typeclasses 102
How to make our own typeclasses and make types instances of our typeclass by hand!

When a type is an instance of a typeclass, we mean we can use the functions that the typeclass defines with that type

~Eq~ defines the ~==~ and ~/=~ functions:
#+begin_src haskell
class Eq a where
    (==) :: a -> a -> Bool
    (/=) :: a -> a -> Bool
    x == y = not (x /= y)
    x /= y = not (x == y)
#+end_src

That defines ~Eq~ as a typeclass and ~a~ is the type of the type that is implementing this typeclass. It can be any lowercase word

Then, we can define any number of functions associated with the typeclass. Actual implementations of the function type signatures are optional

We can't do much with just a typeclass. Let's work on a Traffic Light:
#+begin_src haskell
data TrafficLight = Red | Yellow | Green
#+end_src

#+RESULTS:

Note that we did not auto derive the typeclass for ~Eq~. We are going to handroll this one!
#+begin_src haskell
:{
instance Eq TrafficLight where
    Red == Red = True
    Green == Green = True
    Yellow == Yellow = True
    _ == _ = False
:}
#+end_src

#+RESULTS:

The ~instance~ keyword lets us implement a typeclass for a type. We can define only the ~==~ part of the typeclass because we have defined ~==~ in terms of ~/=~ and vice-versa

That is called the minimal complete definition for a typeclass

We can also implement the ~Show~ typeclass:
#+begin_src haskell
:{
instance Show TrafficLight where
    show Red = "Red light"
    show Yellow = "Yellow light"
    show Green = "Green light"
:}
#+end_src

#+RESULTS:

And now we can play with our creation!
#+begin_src haskell
Red == Red
Red == Yellow
[Red, Yellow, Green]
#+end_src

#+RESULTS:
| Red | light | Yellow | light | Green | light |

You can also make typeclasses that are subclasses of other typeclasses
#+begin_src haskell
class (Eq a) => Num a where
  ...
#+end_src

We can see that we add a class constraint onto this definition for the ~Num~ typeclass. A ~Num~ must be of ~Eq~ before it becomes a ~Num~

You cannot create a typeclass that works on ~Maybe~ because it is not a concrete type. It's a type constructor that takes a type parameter to build a concrete type

The following does not make sense:
#+begin_src haskell
instance Eq Maybe where
  ...
#+end_src

We can try with the whole thing like so:
#+begin_src haskell
instance Eq (Maybe m) where
    Just x == Just y = x == y
    Nothing == Nothing = True
    _ == _ = False
#+end_src

But notice that we do an ~==~ on the ~m~ type while we have not defined the inner type to implement ~Eq~! We can fix that like so:
#+begin_src haskell
instance (Eq m) => Eq (Maybe m) where
    Just x == Just y = x == y
    Nothing == Nothing = True
    _ == _ = False
#+end_src

#+begin_quote
Most of the times, class constraints in class declarations are used for making a typeclass a subclass of another typeclass and class constraints in instance declarations are used to express requirements about the contents of some type. For instance, here we required the contents of the Maybe to also be part of the Eq typeclass.
#+end_quote

You can check the instances of a typeclass by doing ~:info YourTypeClass~ in GHCI
#+begin_src haskell
:info Num
#+end_src

#+RESULTS:
#+begin_example
type Num :: * -> Constraint
class Num a where
  (+) :: a -> a -> a
  (-) :: a -> a -> a
  (*) :: a -> a -> a
  negate :: a -> a
  abs :: a -> a
  signum :: a -> a
  fromInteger :: Integer -> a
  {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
  	-- Defined in ‘GHC.Num’
instance Num Word -- Defined in ‘GHC.Num’
instance Num Integer -- Defined in ‘GHC.Num’
instance Num Int -- Defined in ‘GHC.Num’
instance Num Float -- Defined in ‘GHC.Float’
instance Num Double -- Defined in ‘GHC.Float’
#+end_example

Super useful!!

* A yes-no typeclass
JS is famous for evaluating variables as bools when they are not. We can mimic that behavior in haskell with a custom typeclass

#+begin_src haskell
:{
class YesNo a where
    yesno :: a -> Bool
:}
#+end_src

#+RESULTS:

Now we can implement JS-like semantics with instances of our typeclass:
#+begin_src haskell
:{
instance YesNo Int where
    yesno 0 = False
    yesno _ = True

instance YesNo [a] where
    yesno [] = False
    yesno _ = True

instance YesNo Bool where
    yesno = id

instance YesNo (Maybe a) where
    yesno (Just _) = True
    yesno Nothing = False

instance YesNo TrafficLight where
    yesno Red = False
    yesno _ = True
:}
yesno Red
#+end_src

#+RESULTS:
: False

~id~ is a standard lib function to pass input to output AKA the identity function

* The Functor typeclass
This is a typeclass that is used for things that can be mapped over.

#+begin_src haskell
class Functor f where
    fmap :: (a -> b) -> f a -> f b
#+end_src

Previous typeclasses had concrete types for the variable that played the role of a type. In this case, we have a type constructor that takes one parameter. This allows us to generalize ~map~ from just lists to any type. In fact, ~map~ is the implementation of ~fmap~ for lists!

#+begin_src haskell
instance Functor [] where
    fmap = map
#+end_src

Notice that we did not use ~[a]~ because functor takes a type constructor that takes a single parameter. ~[]~ needs the ~a~ so ~[]~ is a type constructor!

~Maybe~ can also be a ~Functor~!
#+begin_src haskell
instance Functor Maybe where
    fmap f (Just x) = Just (f x)
    fmap f Nothing = Nothing
#+end_src

And we can get funky by implementing ~Functor~ for our ~Tree~ type we made above:
#+begin_src haskell
instance Functor Tree where
    fmap f EmptyTree = EmptyTree
    fmap f (Node x leftsub rightsub) = Node (f x) (fmap f leftsub) (fmap f rightsub)
#+end_src

* Kinds and some type-foo
