#+TITLE: Functors and Monoids

* Functors Redux
We can apply functors to IO actions
#+begin_src haskell
instance Functor IO where
    fmap f action = do
        result <- action
        return (f result)
#+end_src

This allows us to take this
#+begin_src haskell
main = do line <- getLine
          let line' = reverse line
          putStrLn $ "You said " ++ line' ++ " backwards!"
          putStrLn $ "Yes, you really said" ++ line' ++ " backwards!"
#+end_src

And turn it into this
#+begin_src haskell
main = do line <- fmap reverse getLine
          putStrLn $ "You said " ++ line ++ " backwards!"
          putStrLn $ "Yes, you really said" ++ line ++ " backwards!"
#+end_src

We can even use function composition with this
#+begin_src haskell
import Data.Char
import Data.List

main = do line <- fmap (intersperse '-' . reverse . map toUpper) getLine
          putStrLn line
#+end_src

We can also use functors with ~->~ which is kind of trippy
We can see this below
#+begin_src haskell
instance Functor ((->) r) where
    fmap f g = (\x -> f (g x))
#+end_src

If the syntax allowed for it we could have written it like so
#+begin_src haskell
instance Functor (r ->) where
    fmap f g = (\x -> f (g x))
#+end_src

We can see that this is actually of type ~fmap :: (a -> b) -> (r -> a) -> (r -> b)~ which is equivalent to function composition(~.~)!

Because of currying we can think of fmap like ~fmap :: (a -> b) -> (f a -> f b)~
taking in ~a -> b~ and going to ~f a -> f b~ is called lifting a function

~fmap (*2)~ is a lifted function that can take in any functor and modify the inner data

Now lets look at functor laws
#+begin_quote
The first functor law states that if we map the id function over a functor, the functor that we get back should be the same as the original functor.
#+end_quote

#+begin_quote
The second law says that composing two functions and then mapping the resulting function over a functor should be the same as first mapping one function over the functor and then mapping the other one
#+end_quote

This looks like ~fmap (f . g) = fmap f . fmap g~

Conforming to the functor laws is super important for writing good code and also yielding some nice mathematical properties

* Applicative Functors
These are beefed up functors, represented by the ~Applicative~ typeclass found in ~Control.Applicative~. But you don't have to import them

#+RESULTS:

We can map functions with more than one parameter to functors. This results in functions

#+begin_src haskell
:t fmap (++) (Just "hey")
#+end_src

#+RESULTS:
: fmap (++) (Just "hey") :: Maybe ([Char] -> [Char])

The result is functors that contain functions in them

We can map a function over these new functors
#+begin_src haskell
let a = fmap (*) [1,2,3,4]
fmap (\f -> f 9) a
#+end_src

#+RESULTS:
| 9 | 18 | 27 | 36 |

But what if we have a ~Just (3 *)~ and want to take the function out of the functor and fmap it to ~Just 5~? This doesn't work in a general way without us having to manually pattern match the function out of the functor

This is where the ~Applicative~ typeclass comes in handy
#+begin_src haskell
class (Functor f) => Applicative f where
    pure :: a -> f a
    (<*>) :: f (a -> b) -> f a -> f b
#+end_src

The class constraint forces f to be a functor with the type system
The ~pure~ function allows us to take any value and "box" it in our functor
The ~<*>~ function does what we wanted above. It kind of extracts the function and maps it over the second argument

The implementation for ~Maybe~ is below:
#+begin_src haskell
instance Applicative Maybe where
    pure = Just
    Nothing <*> _ = Nothing
    (Just f) <*> something = fmap f something

pure (+3) <*> Just 10
#+end_src

#+RESULTS:
: Prelude> Prelude> Prelude> Prelude> Just 13

Nice! It works. Use ~pure~ only when dealing in an applicative context (aka with ~<*>~)

This lets us apply a function that doesn't know about its params being wrapped in functors and then run it against them!

We can also see that ~pure f <*> x~ is the same as ~fmap f x~
This means ~pure f <*> x <*> y~ is the same as ~fmap f x <*> y~

Because of this we get the following export from ~Applicative~
#+begin_src haskell
(<$>) :: (Functor f) => (a -> b) -> f a -> f b
f <$> x = fmap f x
#+end_src

Now we can apply a function ~f~ over three applicative functors like ~f <$> x <*> y <*> z~ which would be ~f x y z~ if there were no functors wrapping the values

#+begin_src haskell
(++) <$> Just "johntra" <*> Just "volta"
#+end_src

#+RESULTS:
: Just "johntravolta"

#+begin_src haskell
(++) "johntra" "volta"
#+end_src

#+RESULTS:
: johntravolta

Lists are applicative functors!
#+begin_src haskell
instance Applicative [] where
    pure x = [x]
    fs <*> xs = [f x | f <- fs, x <- xs]
#+end_src

#+begin_src haskell
[(*0),(+100),(^2)] <*> [1,2,3]
#+end_src

#+RESULTS:
| 0 | 0 | 0 | 101 | 102 | 103 | 1 | 4 | 9 |

#+begin_src haskell
[(+),(*)] <*> [1,2] <*> [3,4]
#+end_src

#+RESULTS:
| 4 | 5 | 5 | 6 | 3 | 4 | 6 | 8 |

Notice that list comprehension leads us to produce the full product of the two lists aka 9 results

You can think of lists as nondeterministic computations because of laziness. Doing the above applicative operations on lists creates even lazier lists that are even more unsure about their results

We can start to replace list comprehension with applicative functors!
#+begin_src haskell
[ x*y | x <- [2,5,10], y <- [8,10,11]]
(*) <$> [2,5,10] <*> [8,10,11]
#+end_src

#+RESULTS:
| 16 | 20 | 22 | 40 | 50 | 55 | 80 | 100 | 110 |

Those are the same thing!

~IO~ is applicative too
#+begin_src haskell
instance Applicative IO where
    pure = return
    a <*> b = do
        f <- a
        x <- b
        return (f x)
#+end_src

So we can change this
#+begin_src haskell
myAction :: IO String
myAction = do
    a <- getLine
    b <- getLine
    return $ a ++ b
#+end_src

To this
#+begin_src haskell
myAction :: IO String
myAction = (++) <$> getLine <*> getLine
#+end_src

OMG FUNCTIONS ARE APPLICATIVE

This is mainly used for code golf but still its cool
#+begin_src haskell
instance Applicative ((->) r) where
    pure x = (\_ -> x)
    f <*> g = \x -> f x (g x)
#+end_src

#+begin_src haskell
(pure 3) "blah"
pure 3 "blah"
#+end_src

#+RESULTS:
: 3

Check this trippy stuff. Reference the book for how this works
#+begin_src haskell
(+) <$> (+3) <*> (*100) $ 5
#+end_src

#+RESULTS:
: 508

#+begin_quote
You can think of functions as boxes that contain their eventual results, so doing k <$> f <*> g creates a function that will call k with the eventual results from f and g.
#+end_quote

There are multiple ways to implement ~Applicative~ for lists so they created a type for another implementation for lists that just wraps around a list called ~ZipList~
#+begin_src haskell
instance Applicative ZipList where
        pure x = ZipList (repeat x)
        ZipList fs <*> ZipList xs = ZipList (zipWith (\f x -> f x) fs xs)
#+end_src

The repeat creates an infinite list boxed by the ~ZipList~ type. We need this to zip it later with other ~ZipList~ values
~getZipList~ just extracts a list out of a ziplist
#+begin_src haskell
import Control.Applicative
getZipList $ (+) <$> ZipList [1,2,3] <*> ZipList [100,100..]
#+end_src

#+RESULTS:
| 101 | 102 | 103 |

We also get a function called ~liftA2~:
#+begin_src haskell
liftA2 :: (Applicative f) => (a -> b -> c) -> f a -> f b -> f c
liftA2 f a b = f <$> a <*> b
#+end_src

This is just a nice wrapper around applicative style

We can now do some cool stuff with applicative functors
#+begin_src haskell :results output
sequenceA :: (Applicative f) => [f a] -> f [a]
sequenceA [] = pure []
sequenceA (x:xs) = (:) <$> x <*> sequenceA xs
#+end_src


We can also use a fold
#+begin_src haskell :results output
import Control.Applicative
sequenceA :: (Applicative f) => [f a] -> f [a]
sequenceA = foldr (liftA2 (:)) (pure [])
#+end_src

#+RESULTS:

#+begin_src haskell
sequenceA [Just 3, Just 2, Just 1]
#+end_src

#+RESULTS:
: Just [3,2,1]

We could check if 7 satisfies a list of predicates by doing the following:
#+begin_src haskell
and $ map (\f -> f 7) [(>4),(<10),odd]
#+end_src

#+RESULTS:
: True

But we could also do it with sequenceA:
#+begin_src haskell
and $ sequenceA [(>4),(<10),odd] 7
#+end_src

#+RESULTS:
: True

We can also see that the following two are the same
#+begin_src haskell
sequenceA [[1,2],[3,4],[5,6]]
#+end_src

#+RESULTS:
| 1 | 3 | 5 |
| 1 | 3 | 6 |
| 1 | 4 | 5 |
| 1 | 4 | 6 |
| 2 | 3 | 5 |
| 2 | 3 | 6 |
| 2 | 4 | 5 |
| 2 | 4 | 6 |

#+begin_src haskell
[[x,y,z] | x <- [1,2], y <- [3,4], z <- [5,6]]
#+end_src

#+RESULTS:
| 1 | 3 | 5 |
| 1 | 3 | 6 |
| 1 | 4 | 5 |
| 1 | 4 | 6 |
| 2 | 3 | 5 |
| 2 | 3 | 6 |
| 2 | 4 | 5 |
| 2 | 4 | 6 |

This sequenceA function actually can work on IO actions just like the ~sequence~ function we already have seen
#+begin_src haskell
sequenceA [getLine, getLine, getLine]
hey
hi
hello
#+end_src

#+RESULTS:
| hey | hi | hello |

Finally, we can list the applicative functor laws. These are worth thinking through:
+ ~pure f <*> x = fmap f x~
+ ~pure id <*> v = v~
+ ~pure (.) <*> u <*> v <*> w = u <*> (v <*> w)~
+ ~pure f <*> pure x = pure (f x)~
+ ~u <*> pure y = pure ($ y) <*> u~

* The newtype keyword
We can remove the default applicative functor of lists and do the application
element-wise by using ZipList:
#+begin_src haskell
getZipList $ ZipList [(+1),(*100),(*5)] <*> ZipList [1,2,3]
#+end_src

#+RESULTS:
| 2 | 200 | 15 |

To make this type we could do either of the following (the second one gives us
getZipList for free):
#+begin_src haskell
data ZipList a = ZipList [a]
data ZipList a = ZipList { getZipList :: [a] }
#+end_src

~newtype~ is a keyword for exactly this wrapping of types scenario:
#+begin_src haskell
newtype ZipList a = ZipList { getZipList :: [a] }
#+end_src

~newtype~ is limited to one constructor and one field because it does not wrap
any of the types or values. It just basically creates an alias to an actual type
as a shortcut

We can also derive typeclasses as long as the underlying types do as well:
#+begin_src haskell
newtype CharList = CharList { getCharList :: [Char] } deriving (Eq, Show)
CharList "this will be shown!"
#+end_src

#+RESULTS:
: CharList {getCharList = "this will be shown!"}

What if we want to make a tuple an instance of ~Functor~ where the function gets
applied to the first value in the tuple. This seems impossible due to currying
but we can get around it with ~newtype~:
#+begin_src haskell
newtype Pair b a = Pair { getPair :: (a,b) }
instance Functor (Pair c) where
    fmap f (Pair (x,y)) = Pair (f x, y)
getPair $ fmap (*100) (Pair (2,3))
#+end_src

#+RESULTS:
: Prelude Control.Applicative> (200,3)

~newtype~ is faster than ~data~ because it keeps the data representation the
same and just needs to track the internal mapping to the underlying type

~newtype~ is also lazy for the typesystem... kinda crazy:
#+begin_src haskell
data CoolBool = CoolBool { getCoolBool :: Bool }
helloMe :: CoolBool -> String
helloMe (CoolBool _) = "hello"

helloMe undefined
#+end_src

#+RESULTS:
: Prelude Control.Applicative> Prelude Control.Applicative> "*** Exception: Prelude.undefined
: CallStack (from HasCallStack):
:   error, called at libraries/base/GHC/Err.hs:79:14 in base:GHC.Err
:   undefined, called at <interactive>:21:9 in interactive:Ghci16

If we use ~newtype~ though it will succeed because haskell doesn't need to check
if there are multiple constructors because newtype only has one constructor
possible:
#+begin_src haskell
newtype CoolBool = CoolBool { getCoolBool :: Bool }
helloMe :: CoolBool -> String
helloMe (CoolBool _) = "hello"

helloMe undefined
#+end_src

#+RESULTS:
: Prelude Control.Applicative> Prelude Control.Applicative> "hello"

Review on the type creation methods in haskell:

- ~type~ is for type synonyms. Used to make code more readable but not creating
  new types
- ~newtype~ is for wrapping existing types in new types. Record syntax here can
  auto create functions for going to and from our new type
- ~data~ is for custom types and you can go crazy with them

* Monoids
We observe that ~*~ and ~++~ both have identity values that no matter what the
other value is, they always return the other value. We can also observe that
they are associative because order of application of them does not matter.

These common properties of types are monoids!
#+begin_src haskell
class Monoid m where
    mempty :: m
    mappend :: m -> m -> m
    mconcat :: [m] -> m
    mconcat = foldr mappend mempty
#+end_src

We can import it like so:
#+begin_src haskell
import Data.Monoid
#+end_src

#+RESULTS:

Only concrete types can be a monoid because m does not take any type parameters

mempty is the first function. It is not really a function but a polymorphic
constant like ~minBound~. It represents the identity value for a monoid

mappend is the binary function. It doesn't append, more like takes two monoid
values and returns a third monoid value

The last one is mconcat which reduces a list of monoids to a single value. Its
default implementation is pretty good in most cases

Monoids must follow these rules:
 - ~mempty `mappend` x = x~
 - ~x `mappend` mempty = x~
 - ~(x `mappend` y) `mappend` z = x `mappend` (y `mappend` z)~

Note that haskell does not enforce these laws!

Lists are monoids
#+begin_src haskell
instance Monoid [a] where
    mempty = []
    mappend = (++)
#+end_src

Lets see it in action
#+begin_src haskell
"one" `mappend` "two" `mappend` "tree"
 --onetwotree
"pang" `mappend` mempty
 -- pang
mconcat [[1,2],[3,6],[9]]
#+end_src

#+RESULTS:
: Prelude Control.Applicative Data.Monoid> [1,2,3,6,9]

Numbers have many ways to be monoids. Consider ~*~ and ~+~. One would have
mempty be 1 and the other 0. We can have numbers be monoids in different ways
with our new friend ~newtype~!!

Data.Monoid exports us something like so
#+begin_src haskell
newtype Product a =  Product { getProduct :: a }
    deriving (Eq, Ord, Read, Show, Bounded)

instance Num a => Monoid (Product a) where
    mempty = Product 1
    Product x `mappend` Product y = Product (x * y)
#+end_src

We also get ~Sum~ as a monoid for numbers:
#+begin_src haskell
getSum . mconcat . map Sum $ [1,2,3]
#+end_src

#+RESULTS:
: 6

Bools also are monoids in many ways:
#+begin_src haskell
newtype Any = Any { getAny :: Bool }
    deriving (Eq, Ord, Read, Show, Bounded)

instance Monoid Any where
        mempty = Any False
        Any x `mappend` Any y = Any (x || y)

newtype All = All { getAll :: Bool }
        deriving (Eq, Ord, Read, Show, Bounded)

instance Monoid All where
        mempty = All True
        All x `mappend` All y = All (x && y)
#+end_src

We also can see that ~Ordering~ is a monoid:
#+begin_src haskell
instance Monoid Ordering where
    mempty = EQ
    LT `mappend` _ = LT
    EQ `mappend` y = y
    GT `mappend` _ = GT
#+end_src

#+begin_quote
The instance is set up like this: when we mappend two Ordering values, the one on the left is kept, unless the value on the left is EQ, in which case the right one is the result. The identity is EQ. At first, this may seem kind of arbitrary, but it actually resembles the way we alphabetically compare words. We compare the first two letters and if they differ, we can already decide which word would go first in a dictionary. However, if the first two letters are equal, then we move on to comparing the next pair of letters and repeat the process.
#+end_quote

We can see that a function like this can now be rewritten:
#+begin_src haskell
lengthCompare :: String -> String -> Ordering
lengthCompare x y = let a = length x `compare` length y
                        b = x `compare` y
                    in  if a == EQ then b else a
#+end_src

To something like this:
#+begin_src haskell
import Data.Monoid

lengthCompare :: String -> String -> Ordering
lengthCompare x y = (length x `compare` length y) `mappend`
                    (x `compare` y)
#+end_src

Which can be easily extended for more conditions:
#+begin_src haskell
lengthCompare :: String -> String -> Ordering
lengthCompare x y = (length x `compare` length y) `mappend`
                    (vowels x `compare` vowels y) `mappend`
                    (x `compare` y)
    where vowels = length . filter (`elem` "aeiou")
#+end_src

We can also make ~Maybe~ a monoid but this one assumes the inner value in the
Maybe is a monoid itself:
#+begin_src haskell
instance Monoid a => Monoid (Maybe a) where
    mempty = Nothing
    Nothing `mappend` m = m
    m `mappend` Nothing = m
    Just m1 `mappend` Just m2 = Just (m1 `mappend` m2)
#+end_src

If the inner value is not a monoid, we could just return the first value and
discard the second monoid for mappend
#+begin_src haskell
newtype First a = First { getFirst :: Maybe a }
    deriving (Eq, Ord, Read, Show)

instance Monoid (First a) where
    mempty = First Nothing
    First (Just x) `mappend` _ = First (Just x)
    First Nothing `mappend` x = x
#+end_src

#+begin_src haskell
getFirst $ First (Just 'a') `mappend` First (Just 'b')
getFirst . mconcat . map First $ [Nothing, Just 9, Just 10]
#+end_src

#+RESULTS:
: Just 9

We also get a ~Last a~ type
#+begin_src haskell
getLast $ Last (Just "one") `mappend` Last (Just "two")
#+end_src

#+RESULTS:
: Just "two"

Now we move on. We sometimes want to fold things other than lists. For this we
can use ~Foldable~ from Data.Foldable but it conflicts with prelude so do a
qualified import:
#+begin_src haskell
import qualified Data.Foldable as F
#+end_src

#+RESULTS:

We can see how it differs from the Prelude:
#+begin_src haskell
ghci> :t foldr
foldr :: (a -> b -> b) -> b -> [a] -> b
ghci> :t F.foldr
F.foldr :: (F.Foldable t) => (a -> b -> b) -> b -> t a -> b
#+end_src

We can use it with things other than lists!
#+begin_src haskell
F.foldr (||) False (Just True)
#+end_src

#+RESULTS:
: True

Lets implement Foldable for our Tree class we had earlier:
#+begin_src haskell
data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)
#+end_src

#+RESULTS:

One way is to directly implement foldr for it, but we can also implement
foldMap which gives us foldr and foldl for free:
#+begin_src haskell
foldMap :: (Monoid m, Foldable t) => (a -> m) -> t a -> m
#+end_src

Let's do it for our tree:
#+begin_src haskell
instance F.Foldable Tree where
    foldMap f Empty = mempty
    foldMap f (Node x l r) = F.foldMap f l `mappend`
                             f x           `mappend`
                             F.foldMap f r

testTree = Node 5
            (Node 3
                (Node 1 Empty Empty)
                (Node 6 Empty Empty)
            )
            (Node 9
                (Node 8 Empty Empty)
                (Node 10 Empty Empty)
            )

F.foldl (+) 0 testTree
-- 42
#+end_src

Now we can do really cool tricks:
#+begin_src haskell
getAny $ F.foldMap (\x -> Any $ x == 3) testTree
-- True
F.foldMap (\x -> [x]) testTree
-- [1,3,6,5,8,9,10]
#+end_src
