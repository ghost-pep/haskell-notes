#+TITLE: For a Few Monads More

We are going to go through some more monads to get a hold of them. We are going
to use the package mtl for this. It is pretty standard in most Haskell installs

You can check if you have it by the following:
#+begin_src bash
ghc-pkg list
#+end_src

#+RESULTS:
| /nix/store/r3qwcf425bwzyirhaing00gf8vkd0yih-ghc-8.10.4/lib/ghc-8.10.4/package.conf.d |
| Cabal-3.2.1.0                                                                        |
| array-0.5.4.0                                                                        |
| base-4.14.1.0                                                                        |
| binary-0.8.8.0                                                                       |
| bytestring-0.10.12.0                                                                 |
| containers-0.6.2.1                                                                   |
| deepseq-1.4.4.0                                                                      |
| directory-1.3.6.0                                                                    |
| exceptions-0.10.4                                                                    |
| filepath-1.4.2.1                                                                     |
| (ghc-8.10.4)                                                                         |
| ghc-boot-8.10.4                                                                      |
| ghc-boot-th-8.10.4                                                                   |
| ghc-compact-0.1.0.0                                                                  |
| ghc-heap-8.10.4                                                                      |
| ghc-prim-0.6.1                                                                       |
| ghci-8.10.4                                                                          |
| haskeline-0.8.0.1                                                                    |
| hpc-0.6.1.0                                                                          |
| integer-gmp-1.0.3.0                                                                  |
| libiserv-8.10.4                                                                      |
| mtl-2.2.2                                                                            |
| parsec-3.1.14.0                                                                      |
| pretty-1.1.3.6                                                                       |
| process-1.6.9.0                                                                      |
| rts-1.0                                                                              |
| stm-2.5.0.0                                                                          |
| template-haskell-2.16.0.0                                                            |
| terminfo-0.4.1.4                                                                     |
| text-1.2.4.1                                                                         |
| time-1.9.3                                                                           |
| transformers-0.5.6.2                                                                 |
| unix-2.7.2.2                                                                         |
| xhtml-3000.2.2.1                                                                     |

* Writer? I hardly know her!
The Writer monad is for values that have another value attached that acts like a logger
It is from ~Control.Monad.Writer~
#+begin_src haskell
import Control.Monad.Writer
#+end_src

#+RESULTS:

#+begin_src haskell
newtype Writer w a = Writer { runWriter :: (a, w) }
#+end_src

With monad instance like so
#+begin_src haskell
instance (Monoid w) => Monad (Writer w) where
    return x = Writer (x, mempty)
    (Writer (x,v)) >>= f = let (Writer (y, v')) = f x in Writer (y, v `mappend` v')
#+end_src

We can use do notation with it
#+begin_src haskell
:{
logNumber :: Int -> Writer [String] Int
logNumber x = Writer (x, ["Got number: " ++ show x])

multWithLog :: Writer [String] Int
multWithLog = do
    a <- logNumber 3
    b <- logNumber 5
    return (a*b)
:}

runWriter multWithLog
#+end_src

GHCI is not playing well with the above...

We can use ~tell~ to add data to the log without binding data to the non monoid:
#+begin_src haskell
multWithLog :: Writer [String] Int
multWithLog = do
    a <- logNumber 3
    b <- logNumber 5
    tell ["Gonna multiply these two"]
    return (a*b)

-- ghci> runWriter multWithLog
-- (15,["Got number: 3","Got number: 5","Gonna multiply these two"])
#+end_src

We can add logging to a custom gcd implementation like so:
#+begin_src haskell
gcd' :: Int -> Int -> Int
gcd' a b
    | b == 0    = a
    | otherwise = gcd' b (a `mod` b)
#+end_src

Becomes
#+begin_src haskell
import Control.Monad.Writer

gcd' :: Int -> Int -> Writer [String] Int
gcd' a b
    | b == 0 = do
        tell ["Finished with " ++ show a]
        return a
    | otherwise = do
        tell [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)]
        gcd' b (a `mod` b)

-- mapM_ putStrLn $ snd $ runWriter (gcd' 8 3)
-- 8 mod 3 = 2
-- 3 mod 2 = 1
-- 2 mod 1 = 0
-- Finished with 1
#+end_src

The following is inefficient because lists fully construct the left side of
~++~. Doing
#+begin_src haskell
("a" ++ ("b" ++ "c"))
#+end_src
is waaay faster than
#+begin_src haskell
(("a" ++ "b") ++ "c")
#+end_src

We can see a slower version which logs in reverse order here:
#+begin_src haskell
import Control.Monad.Writer

gcdReverse :: Int -> Int -> Writer [String] Int
gcdReverse a b
    | b == 0 = do
        tell ["Finished with " ++ show a]
        return a
    | otherwise = do
        result <- gcdReverse b (a `mod` b)
        tell [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)]
        return result
#+end_src

We can use difference lists for more efficient monoids for the writers.
Difference lists are stored as lambdas rather than lists by themselves.

#+begin_src haskell
[1,2,3]
-- becomes
\xs -> [1,2,3] ++ xs
#+end_src

Appending becomes
#+begin_src haskell
f `append` g = \xs -> f (g xs)
#+end_src

we can make a newtype for difflists
#+begin_src haskell
newtype DiffList a = DiffList { getDiffList :: [a] -> [a] }

toDiffList :: [a] -> DiffList a
toDiffList xs = DiffList (xs++)

fromDiffList :: DiffList a -> [a]
fromDiffList (DiffList f) = f []

instance Monoid (DiffList a) where
    mempty = DiffList (\xs -> [] ++ xs)
    (DiffList f) `mappend` (DiffList g) = DiffList (\xs -> f (g xs))
#+end_src

This means we just do function composition for adding new things to the
difflist. We can now improve our gcd by a significant factor
#+begin_src haskell
import Control.Monad.Writer

gcd' :: Int -> Int -> Writer (DiffList String) Int
gcd' a b
    | b == 0 = do
        tell (toDiffList ["Finished with " ++ show a])
        return a
    | otherwise = do
        result <- gcd' b (a `mod` b)
        tell (toDiffList [show a ++ " mod " ++ show b ++ " = " ++ show (a `mod` b)])
        return result
#+end_src

* Reader? Ugh, not this joke again.
We remember that functions ~(->) r~ are a functor and an applicative functor. It
is also a monad! It is in Control.Monad.Instances

#+begin_src haskell
instance Monad ((->) r) where
    return x = \_ -> x
    h >>= f = \w -> f (h w) w
#+end_src

>>= takes a function (monad) and a monadic function and then creates a new monad
(function, hence the lambda)

Here is a do notation that uses this monad:
#+begin_src haskell
import Control.Monad.Instances

addStuff :: Int -> Int
addStuff = do
    a <- (*2)
    b <- (+10)
    return (a+b)

-- ghci> addStuff 3
-- 19
#+end_src

To illustrate this we have the following:
#+begin_src haskell
addStuff :: Int -> Int
addStuff x = let
    a = (*2) x
    b = (+10) x
    in a+b
#+end_src

#+begin_quote
We see that the reader monad allows us to treat functions as values with a context. We can act as if we already know what the functions will return. It does this by gluing functions together into one function and then giving that function's parameter to all of the functions that it was glued from. So if we have a lot of functions that are all just missing one parameter and they'd eventually be applied to the same thing, we can use the reader monad to sort of extract their future results and the >>= implementation will make sure that it all works out.
#+end_quote


* Tasteful stateful computations
Sometimes dealing with an immutable language can be bad. Especially for
stateful applications. For this, we have the State monad to help us out and stay
nice and pure

With random number generation, we had to do this
#+begin_src haskell
threeCoins :: StdGen -> (Bool, Bool, Bool)
threeCoins gen =
    let (firstCoin, newGen) = random gen
        (secondCoin, newGen') = random newGen
        (thirdCoin, newGen'') = random newGen'
    in  (firstCoin, secondCoin, thirdCoin)
#+end_src

Passing around the state is kinda trash and we wouldn't have to do this in other languages

We can introduce a function that takes state and generates a new state and a
value:
#+begin_src haskell
s -> (a,s)
#+end_src

We can model a stack with this stateful form:
#+begin_src haskell
type Stack = [Int]

pop :: Stack -> (Int,Stack)
pop (x:xs) = (x,xs)

push :: Int -> Stack -> ((),Stack)
push a xs = ((),a:xs)
#+end_src

We can "glue" stack computations together like so:
#+begin_src haskell
stackManip :: Stack -> (Int, Stack)
stackManip stack = let
    ((),newStack1) = push 3 stack
    (a ,newStack2) = pop newStack1
    in pop newStack2
#+end_src

This reminds of monads!

Control.State.Monad provides us with something like the following:
#+begin_src haskell
newtype State s a = State { runState :: s -> (a,s) }

instance Monad (State s) where
    return x = State $ \s -> (x,s)
    (State h) >>= f = State $ \s -> let (a, newState) = h s
                                        (State g) = f a
                                    in  g newState
#+end_src

Because pop and push are stateful its easy to wrap them in this:
#+begin_src haskell
import Control.Monad.State

pop :: State Stack Int
pop = State $ \(x:xs) -> (x,xs)

push :: Int -> State Stack ()
push a = State $ \xs -> ((),a:xs)
#+end_src

We can now use them!
#+begin_src haskell
import Control.Monad.State

stackManip :: State Stack Int
stackManip = do
    push 3
    a <- pop
    pop
#+end_src

We can also do more complex stuff with do notation:
#+begin_src haskell
stackStuff :: State Stack ()
stackStuff = do
    a <- pop
    if a == 5
        then push 5
        else do
            push 3
            push 8
#+end_src

Even chain our previous functions into the do notation
#+begin_src haskell
moreStack :: State Stack ()
moreStack = do
    a <- stackManip
    if a == 100
        then stackStuff
        else return ()
#+end_src

We also have some helper functions:
#+begin_src haskell
get = State $ \s -> (s,s)

put newState = State $ \s -> ((),newState)
#+end_src

#+begin_src haskell
stackyStack :: State Stack ()
stackyStack = do
    stackNow <- get
    if stackNow == [1,2,3]
        then put [8,3,1]
        else put [9,2,1]
#+end_src

Now we can finally fix our random problem from before:
#+begin_src haskell
import System.Random
import Control.Monad.State

randomSt :: (RandomGen g, Random a) => State g a
randomSt = State random

threeCoins :: State StdGen (Bool,Bool,Bool)
threeCoins = do
    a <- randomSt
    b <- randomSt
    c <- randomSt
    return (a,b,c)

-- ghci> runState threeCoins (mkStdGen 33)
-- ((True,False,True),680029187 2103410263)
#+end_src

* Error error on the wall
* Some useful monadic functions
* Making monads
