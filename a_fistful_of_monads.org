#+TITLE: A fistful of Monads

We can think of an applicative value as a normal value with extra context. We
might want to apply multiple functions that add context to a value. For this we
have monads!

#+begin_src haskell
(>>=) :: (Monad m) => m a -> (a -> m b) -> m b
#+end_src

~>>=~ is called bind

* Getting our feet wet with Maybe
Monads are applicative functors that support binding

The question is how do you pass a Maybe into this function:
#+begin_src haskell
 (\x -> Just (x+1))
#+end_src

One approach might be this
#+begin_src haskell
applyMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b
applyMaybe Nothing f  = Nothing
applyMaybe (Just x) f = f x

Just "smile" `applyMaybe` \x -> Just (x ++ " :)")
#+end_src

* The Monad type class
Monads have their own type class!
#+begin_src haskell
class Monad m where
    return :: a -> m a

    (>>=) :: m a -> (a -> m b) -> m b

    (>>) :: m a -> m b -> m b
    x >> y = x >>= \_ -> y

    fail :: String -> m a
    fail msg = error msg
#+end_src

In haskell, we dont say that monads are applicative functors even though they
are. This is a historical thing, but we always make monads applicative functors
anyways so fear not

The first function is ~return~ which is the same as ~pure~

The next function is bind, ~>>=~. It takes a monadic value and feeds it to a
normal function that returns a monadic value

~>>~ has a default implementation and we wont have to implement it most times

Finally we have ~fail~ which is never used explicitly in code. It is used by
Haskell to enable a syntactic construct we will see later

Here is how ~Maybe~ is a monad:
#+begin_src haskell
instance Monad Maybe where
    return x = Just x
    Nothing >>= f = Nothing
    Just x >>= f  = f x
    fail _ = Nothing
#+end_src

We can see it in action:
#+begin_src haskell
Just 9 >>= \x -> return (x*10)
#+end_src

#+RESULTS:
: Just 90

* Walk the line
Example using birds on two sides of a pole that someone is using to balance:
#+begin_src haskell
:{
type Birds = Int
type Pole = (Birds,Birds)
:}
#+end_src

#+RESULTS:

Now we can start to model this
#+begin_src haskell
landLeft :: Birds -> Pole -> Pole
landLeft n (left,right) = (left + n,right)

landRight :: Birds -> Pole -> Pole
landRight n (left,right) = (left,right + n)
#+end_src

But this doesn't capture the failure of too many birds on one side
#+begin_src haskell
:{
landLeft :: Birds -> Pole -> Maybe Pole
landLeft n (left,right)
    | abs ((left + n) - right) < 4 = Just (left + n, right)
    | otherwise                    = Nothing

landRight :: Birds -> Pole -> Maybe Pole
landRight n (left,right)
    | abs (left - (right + n)) < 4 = Just (left, right + n)
    | otherwise                    = Nothing
:}
#+end_src

#+RESULTS:

We can now test an example that should fail but also end up in a valid state if
our error checking doesnt check at all phases of transformation:
#+begin_src haskell
return (0,0) >>= landLeft 1 >>= landRight 4 >>= landLeft (-1) >>= landRight (-2)
#+end_src

#+RESULTS:
: Nothing

We can add a function to make the guy fail always:
#+begin_src haskell
:{
banana :: Pole -> Maybe Pole
banana _ = Nothing
:}
return (0,0) >>= landLeft 1 >>= banana >>= landRight 1
#+end_src

#+RESULTS:
: Nothing

We can see that our banana function is just the ~>>~ function with a Nothing: ~m >> n = m >>= \_ -> n~
#+begin_src haskell
return (0,0) >>= landLeft 1 >> Nothing >>= landRight 1
#+end_src

#+RESULTS:
: Nothing

This is awesome notation because it saves us from cursed code like this:
#+begin_src haskell
routine :: Maybe Pole
routine = case landLeft 1 (0,0) of
    Nothing -> Nothing
    Just pole1 -> case landRight 4 pole1 of
        Nothing -> Nothing
        Just pole2 -> case landLeft 2 pole2 of
            Nothing -> Nothing
            Just pole3 -> landLeft 1 pole3
#+end_src

* do notation
do notation is actually applicable to any monads!!

We can see that this
#+begin_src haskell
Just 3 >>= (\x -> Just "!" >>= (\y -> Just (show x ++ y)))
#+end_src

Is the same as this
#+begin_src haskell
let x = 3; y = "!" in show x ++ y
#+end_src

With the difference being that the first example can fail with the Maybe context
added in

We can use do notation to clean up this
#+begin_src haskell
foo :: Maybe String
foo = Just 3   >>= (\x ->
      Just "!" >>= (\y ->
      Just (show x ++ y)))
#+end_src

into this
#+begin_src haskell
foo :: Maybe String
foo = do
    x <- Just 3
    y <- Just "!"
    Just (show x ++ y)
#+end_src

do syntax is just monadic chaining

We can rewrite our pole example chain like so now:
#+begin_src haskell
routine :: Maybe Pole
routine = do
    start <- return (0,0)
    first <- landLeft 2 start
    second <- landRight 2 first
    landLeft 1 second
#+end_src

We can throw a banana like so:
#+begin_src haskell
routine :: Maybe Pole
routine = do
    start <- return (0,0)
    first <- landLeft 2 start
    Nothing
    second <- landRight 2 first
    landLeft 1 second
#+end_src

We can use pattern matching in do notation
#+begin_src haskell
justH :: Maybe Char
justH = do
    (x:xs) <- Just "hello"
    return x
#+end_src

When pattern matching fails in a do statement, the ~fail~ function is called.
This function is normally a runtime error in Haskell, but Maybe overrides it to
return Nothing
#+begin_src haskell
fail :: (Monad m) => String -> m a
fail msg = error msg
#+end_src

We can see this in action
#+begin_src haskell
:{
wopwop :: Maybe Char
wopwop = do
    (x:xs) <- Just ""
    return x
:}

wopwop
#+end_src

#+RESULTS:
: Prelude Control.Applicative Data.Monoid F> Nothing

* The list monad
Maybe gave us a failure context. Lists give us non-determinism!

#+begin_src haskell
instance Monad [] where
    return x = [x]
    xs >>= f = concat (map f xs)
    fail _ = []
#+end_src

We can see it in action
#+begin_src haskell
[3,4,5] >>= \x -> [x,-x]
#+end_src

#+RESULTS:
| 3 | -3 | 4 | -4 | 5 | -5 |

We have now applied a non-deterministic function to a non-deterministic value!

We can see chaining:
#+begin_src haskell
[1,2] >>= \n -> ['a','b'] >>= \ch -> return (n,ch)
#+end_src

#+RESULTS:
| 1 | a |
| 1 | b |
| 2 | a |
| 2 | b |

This is the same as this in do notation:
#+begin_src haskell
:{
listOfTuples :: [(Int,Char)]
listOfTuples = do
    n <- [1,2]
    ch <- ['a','b']
    return (n,ch)
:}
listOfTuples
#+end_src

#+RESULTS:
| 1 | a |
| 1 | b |
| 2 | a |
| 2 | b |

We see that list comprehension does the same thing! Actually list comprehension
is just syntax sugar for monads!
#+begin_src haskell
[ (n,ch) | n <- [1,2], ch <- ['a','b'] ]
#+end_src

#+RESULTS:
| 1 | a |
| 1 | b |
| 2 | a |
| 2 | b |

We can do filtering with list comprehension
#+begin_src haskell
[ x | x <- [1..50], '7' `elem` show x ]
#+end_src

#+RESULTS:
| 7 | 17 | 27 | 37 | 47 |

But how is this translated into monads? We actually need ~guard~ and ~MonadPlus~

~MonadPlus~ is for monads that are monoids too:
#+begin_src haskell
import Control.Monad
#+end_src

#+RESULTS:

#+begin_src haskell
class Monad m => MonadPlus m where
    mzero :: m a
    mplus :: m a -> m a -> m a
#+end_src

mzero is like mempty and mplus is like mappend

We can see lists fit this:
#+begin_src haskell
instance MonadPlus [] where
    mzero = []
    mplus = (++)
#+end_src

Useful!

The guard function is like so
#+begin_src haskell
guard :: (MonadPlus m) => Bool -> m ()
guard True = return ()
guard False = mzero
#+end_src

#+begin_src haskell
[1..50] >>= (\x -> guard ('7' `elem` show x) >> return x)
#+end_src

#+RESULTS:
| 7 | 17 | 27 | 37 | 47 |

And as a do notation:
#+begin_src haskell
:{
sevensOnly :: [Int]
sevensOnly = do
    x <- [1..50]
    guard ('7' `elem` show x)
    return x
:}
sevensOnly
#+end_src

#+RESULTS:
| 7 | 17 | 27 | 37 | 47 |

We can model a chess knights move now
#+begin_src haskell
:{
type KnightPos = (Int,Int)

moveKnight :: KnightPos -> [KnightPos]
moveKnight (c,r) = do
    (c',r') <- [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)
               ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)
               ]
    guard (c' `elem` [1..8] && r' `elem` [1..8])
    return (c',r')

-- can also be without monads like so:
-- moveKnight :: KnightPos -> [KnightPos]
-- moveKnight (c,r) = filter onBoard
--     [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)
--     ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)
--     ]
--     where onBoard (c,r) = c `elem` [1..8] && r `elem` [1..8]

in3 :: KnightPos -> [KnightPos]
in3 start = do
    first <- moveKnight start
    second <- moveKnight first
    moveKnight second

-- the same function without do notation:
-- in3 start = return start >>= moveKnight >>= moveKnight >>= moveKnight

canReachIn3 :: KnightPos -> KnightPos -> Bool
canReachIn3 start end = end `elem` in3 start
:}

(6,2) `canReachIn3` (6,1)
#+end_src

#+RESULTS:
: Prelude Control.Applicative Data.Monoid F Control.Monad> True

* Monad laws
Haskell can only enforce types and not rules about types so we have to make sure
if we make a monad that it conforms to the following rules:

- Left identity: ~return x >>= f~ is the same damn thing as ~f x~
- Right identity: ~m >>= return~ is no different than just ~m~
- Associativity: Doing ~(m >>= f) >>= g~ is just like doing ~m >>= (\x -> f x >>= g)~

  Another way to look at this law is that we can compose two monadic functions
  with ~>>=~

  #+begin_src haskell
(<=<) :: (Monad m) => (b -> m c) -> (a -> m b) -> (a -> m c)
f <=< g = (\x -> g x >>= f)
  #+end_src

  #+begin_src haskell
let f x = [x,-x]
let g x = [x*3,x*2]
let h = f <=< g
h 3
-- [9,-9,6,-6]
  #+end_src
